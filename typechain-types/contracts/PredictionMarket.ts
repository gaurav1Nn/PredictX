/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BET_FEE"
      | "MIN_STAKE"
      | "bettingToken"
      | "createMarket"
      | "getOutcomesLength"
      | "marketBets"
      | "marketCount"
      | "marketOutcomes"
      | "markets"
      | "owner"
      | "placeBet"
      | "renounceOwnership"
      | "resolveMarket"
      | "simulateCrossChainCall"
      | "stakeTokens"
      | "stakes"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "MarketCreated"
      | "MarketResolved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BET_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_STAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bettingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [string, string[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutcomesLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketOutcomes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateCrossChainCall",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BET_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_STAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bettingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutcomesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateCrossChainCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    outcomeIndex: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    amount: bigint,
    outcomeIndex: bigint,
    token: string
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    amount: bigint;
    outcomeIndex: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    question: string,
    outcomes: string[],
    resolutionTime: BigNumberish,
    bettingAsset: AddressLike
  ];
  export type OutputTuple = [
    marketId: bigint,
    question: string,
    outcomes: string[],
    resolutionTime: bigint,
    bettingAsset: string
  ];
  export interface OutputObject {
    marketId: bigint;
    question: string;
    outcomes: string[];
    resolutionTime: bigint;
    bettingAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    winningOutcome: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, winningOutcome: bigint];
  export interface OutputObject {
    marketId: bigint;
    winningOutcome: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BET_FEE: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE: TypedContractMethod<[], [bigint], "view">;

  bettingToken: TypedContractMethod<[], [string], "view">;

  createMarket: TypedContractMethod<
    [
      _question: string,
      _outcomes: string[],
      _resolutionTime: BigNumberish,
      _bettingAsset: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getOutcomesLength: TypedContractMethod<
    [_marketId: BigNumberish],
    [bigint],
    "view"
  >;

  marketBets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        user: string;
        amount: bigint;
        outcomeIndex: bigint;
        token: string;
      }
    ],
    "view"
  >;

  marketCount: TypedContractMethod<[], [bigint], "view">;

  marketOutcomes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint, string] & {
        question: string;
        resolutionTime: bigint;
        resolved: boolean;
        winningOutcome: bigint;
        bettingAsset: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<
    [
      _marketId: BigNumberish,
      _outcomeIndex: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveMarket: TypedContractMethod<
    [_marketId: BigNumberish, _winningOutcome: BigNumberish],
    [void],
    "nonpayable"
  >;

  simulateCrossChainCall: TypedContractMethod<
    [
      marketId: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      user: AddressLike,
      tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  stakeTokens: TypedContractMethod<
    [amount: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BET_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bettingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      _question: string,
      _outcomes: string[],
      _resolutionTime: BigNumberish,
      _bettingAsset: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOutcomesLength"
  ): TypedContractMethod<[_marketId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketBets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        user: string;
        amount: bigint;
        outcomeIndex: bigint;
        token: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketOutcomes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint, string] & {
        question: string;
        resolutionTime: bigint;
        resolved: boolean;
        winningOutcome: bigint;
        bettingAsset: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      _outcomeIndex: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveMarket"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _winningOutcome: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simulateCrossChainCall"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      user: AddressLike,
      tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeTokens"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BetPlaced(uint256,address,uint256,uint256,address)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "MarketCreated(uint256,string,string[],uint256,address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketResolved(uint256,uint256)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
